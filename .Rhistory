label = percent(value/100)), size=5)
#Answered_Correctly
df <- data.frame(
group = c("Correct", "Incorrect"),
value = c(length(train_question$answered_correctly[train_question$answered_correctly == "1"]), length(train_question$answered_correctly[train_question$answered_correctly == "0"])))
bp<- ggplot(df, aes(x="", y=value, fill=group))+
geom_bar(width = 1, stat = "identity")
pie <- bp + coord_polar("y", start=0)
pie = pie + scale_fill_brewer(palette="Dark")+
theme_minimal()
pie
#Answered_Correctly
df <- data.frame(
group = c("Correct", "Incorrect"),
value = c(length(train_question$answered_correctly[train_question$answered_correctly == "1"]), length(train_question$answered_correctly[train_question$answered_correctly == "0"])))
bp<- ggplot(df, aes(x="", y=value, fill=group))+
geom_bar(width = 1, stat = "identity")
pie <- bp + coord_polar("y", start=0)
pie = pie + scale_fill_brewer(palette="Dark2")+
theme_minimal()
pie
#Answered_Correctly
df <- data.frame(
group = c("Correct", "Incorrect"),
value = c(length(train_question$answered_correctly[train_question$answered_correctly == "1"]), length(train_question$answered_correctly[train_question$answered_correctly == "0"])))
df
bp<- ggplot(df, aes(x="", y=value, fill=group))+
geom_bar(width = 1, stat = "identity")
pie <- bp + coord_polar("y", start=0)
pie = pie + scale_fill_brewer(palette="Dark2")+
theme_minimal()
pie
D = "C:/workspaceschool/Project_answerCP/"
#D = "/mnt/c/workspaceschool/Project_answerCP/"
setwd(D)
print(paste0("A diretoria do projeto é: ",D[1]))
#This extension is used for the "countLines" function in Insert Data
#install.packages("R.utils")
library(R.utils)
#This extension is used for the "laf_open" function
#install.packages("LaF")
library(LaF)
#install.packages("stringr")
library(stringr)
#install.packages("tidyr")
library(tidyr)
#install.packages(sqldf)
library(sqldf)
#install.packages("dplyr")
library(dplyr)
#install.packages("foreach")
library(foreach)
#install.packages("doParallel")
library(doParallel)
#install.packages("ggplot2")
library(ggplot2)
#install.packages("scales")
library(scales)
#insert dataset questions
Filename1 ="database_aa1/questions.csv"
questions = read.csv2((paste0(D,Filename1)), sep = ",", dec = ".")
#insert dataset lectures
Filename2 ="database_aa1/lectures.csv"
lectures = read.csv2((paste0(D,Filename2)), sep = ",",dec = ".")
#insert dataset train_sample
Filename3 ="database_aa1/sample/train_sample.csv"
train_sample = read.csv2(paste0(D,Filename3), sep = ",", header = FALSE, dec = ".")
#insert total lectures of train
Filename4 = "database_aa1/sample/lecture_total.csv"
total_lecture = read.csv2(paste0(D,Filename4), sep = ",", dec = ".")
#insert headers in data frame train_sample and in total lectures
Filename5 ="database_aa1/train.csv"
columns_name = read.csv2(paste0(D,Filename5), sep = ",", header = FALSE, nrows=1, dec = ".")
for (i in 1:dim(train_sample)[2]) {
names(train_sample)[i] <- as.character(columns_name[1,i])
names(total_lecture)[i]<- as.character(columns_name[1,i])
}
#remove temporary variables
rm(Filename1, Filename2, Filename3, Filename4, Filename5, columns_name, i)
#head of dataset questions
head(questions, n = 10)
#head of dataset lectures
head(lectures, n = 10)
#head of dataset train
head(train_sample, n = 10)
#Remove lectures of train
train_question = train_sample[train_sample$content_type_id == 0,]
#Merge questions and train
names(questions)[1] <- "content_id"
train_question = merge(x = train_question, y = questions, by = "content_id", all.x = TRUE)
#remove feature row_id and user_answer
train_question = train_question[-c(2,5,7)]
#Separate Tags
train_question = train_question %>%
separate(tags, c("tag1","tag2","tag3", "tag4"), sep = " ")
#Features Engineering to join information of user
question_gb = fn$sqldf("Select user_id, count(distinct task_container_id) as count_tasks, sum(answered_correctly) as correct, count(answered_correctly) as count_answers,
sum(cast(answered_correctly as double))/count(cast(answered_correctly as double)) as perc_correct
from train_question group by user_id ")
train_question = merge(x = train_question, y = question_gb, by = "user_id", all.x = TRUE)
names(lectures)[1] <- "content_id"
total_lecture = merge(x = total_lecture, y = lectures, by = "content_id", all.x = TRUE)
total_lecture = total_lecture[-c(1,2,5,7,8,9,10)]
lecture_gb = fn$sqldf("Select user_id, count(distinct task_container_id) as count_lectures,
count(distinct tag) as count_tag from total_lecture group by user_id ")
train_question = merge(x = train_question, y = lecture_gb, by = "user_id", all.x = TRUE)
##This code transform user information in information in the moment of the question ( run parallel ) have a big computing cust
#setup parallel backend to use many processors
#cores=detectCores()
#cl <- makeCluster(cores[1]-1) #not to overload your computer
#registerDoParallel(cl)
#list = foreach (i = 1:length(train_question[,1])) %dopar% {
#  user = train_question[i,1]
#  time = train_question[i,3]
#  question_gb = fn$sqldf("Select user_id, count(distinct task_container_id) as count_tasks, sum(answered_correctly) as correct, count(answered_correctly) as count_answers,
#                       sum(cast(answered_correctly as double))/count(cast(answered_correctly as double)) as perc_correct
#                       from train_question where user_id = '$user' and timestamp < '$time' group by user_id ")
#  lecture_gb = fn$sqldf("Select user_id, count(distinct task_container_id) as count_lectures,
#                        count(distinct tag) as count_tag from total_lecture where user_id = '$user' and timestamp < '$time' group by user_id ")
#  train_question[i,15] = question_gb[1,2]
#  train_question[i,16] = question_gb[1,3]
#  train_question[i,17] = question_gb[1,4]
#  train_question[i,18] = question_gb[1,5]
#  train_question[i,19] = lecture_gb[1,2]
#  train_question[i,20] = lecture_gb[1,3]
#  print(i)
#}
#stopCluster(cl)
#Correction type of Data
train_question = transform(train_question, content_id = as.factor(content_id), user_id = as.factor(user_id),
task_container_id = as.factor(task_container_id), answered_correctly = as.factor(answered_correctly),
bundle_id = as.factor(bundle_id), correct_answer = as.factor(correct_answer),
part = as.factor(part), tag1 = as.factor(tag1), tag2 = as.factor(tag2), tag3 = as.factor(tag3), tag4 = as.factor(tag4))
#NA´S TRANSFORM
train_question$prior_question_elapsed_time[is.na(train_question$prior_question_elapsed_time)] <- 0 # replace with "0"
train_question$tag1[is.na(train_question$tag1)] <- "0" # replace with "0"
train_question$tag2[is.na(train_question$tag2)] <- "0" # replace with "0"
train_question$tag3[is.na(train_question$tag3)] <- "0" # replace with "0"
train_question$tag4[is.na(train_question$tag4)] <- "0" # replace with "0"
train_question$count_lectures[is.na(train_question$count_lectures)] <- 0 # replace with "0"
train_question$count_tag[is.na(train_question$count_tag)] <- 0 # replace with "0"
#remove not important dataframes
rm(lectures, questions, train_sample, lecture_gb, question_gb, total_lecture, train_sample)
rm(cl, time, user, cores)
head(train_question)
#count lines of total data set
#n_rows = countLines(paste0(D,"database_aa1/train.csv"))
#n_rows = n_rows[1]
#cat("This is a number of rows of total dataset train: ",n_rows)
#rm(r_rows)
#Dim of sample dataset
cat("This is a dimension of sample dataset train: ",dim(train_question))
#summary of dataset
summary(train_question)
D = "C:/workspaceschool/Project_answerCP/"
#D = "/mnt/c/workspaceschool/Project_answerCP/"
setwd(D)
print(paste0("A diretoria do projeto é: ",D[1]))
#This extension is used for the "countLines" function in Insert Data
#install.packages("R.utils")
library(R.utils)
#This extension is used for the "laf_open" function
#install.packages("LaF")
library(LaF)
#install.packages("stringr")
library(stringr)
#install.packages("tidyr")
library(tidyr)
#install.packages(sqldf)
library(sqldf)
#install.packages("dplyr")
library(dplyr)
#install.packages("foreach")
library(foreach)
#install.packages("doParallel")
library(doParallel)
#install.packages("ggplot2")
library(ggplot2)
#install.packages("scales")
library(scales)
#insert dataset questions
Filename1 ="database_aa1/questions.csv"
questions = read.csv2((paste0(D,Filename1)), sep = ",", dec = ".")
#insert dataset lectures
Filename2 ="database_aa1/lectures.csv"
lectures = read.csv2((paste0(D,Filename2)), sep = ",",dec = ".")
#insert dataset train_sample
Filename3 ="database_aa1/sample/train_sample.csv"
train_sample = read.csv2(paste0(D,Filename3), sep = ",", header = FALSE, dec = ".")
#insert total lectures of train
Filename4 = "database_aa1/sample/lecture_total.csv"
total_lecture = read.csv2(paste0(D,Filename4), sep = ",", dec = ".")
#insert headers in data frame train_sample and in total lectures
Filename5 ="database_aa1/train.csv"
columns_name = read.csv2(paste0(D,Filename5), sep = ",", header = FALSE, nrows=1, dec = ".")
for (i in 1:dim(train_sample)[2]) {
names(train_sample)[i] <- as.character(columns_name[1,i])
names(total_lecture)[i]<- as.character(columns_name[1,i])
}
#remove temporary variables
rm(Filename1, Filename2, Filename3, Filename4, Filename5, columns_name, i)
#head of dataset questions
head(questions, n = 10)
#head of dataset lectures
head(lectures, n = 10)
#head of dataset train
head(train_sample, n = 10)
#Remove lectures of train
train_question = train_sample[train_sample$content_type_id == 0,]
#Merge questions and train
names(questions)[1] <- "content_id"
train_question = merge(x = train_question, y = questions, by = "content_id", all.x = TRUE)
#remove feature row_id and user_answer
train_question = train_question[-c(2,5,7)]
#Separate Tags
train_question = train_question %>%
separate(tags, c("tag1","tag2","tag3", "tag4"), sep = " ")
#Features Engineering to join information of user
question_gb = fn$sqldf("Select user_id, count(distinct task_container_id) as count_tasks, sum(answered_correctly) as correct,
count(answered_correctly) as count_answers,
sum(cast(answered_correctly as double))/count(cast(answered_correctly as double)) as perc_correct
from train_question group by user_id ")
train_question = merge(x = train_question, y = question_gb, by = "user_id", all.x = TRUE)
names(lectures)[1] <- "content_id"
total_lecture = merge(x = total_lecture, y = lectures, by = "content_id", all.x = TRUE)
total_lecture = total_lecture[-c(1,2,5,7,8,9,10)]
lecture_gb = fn$sqldf("Select user_id, count(distinct task_container_id) as count_lectures,
count(distinct tag) as count_tag from total_lecture group by user_id ")
train_question = merge(x = train_question, y = lecture_gb, by = "user_id", all.x = TRUE)
##This code transform user information in information in the moment of the question ( run parallel ) have a big computing cust
#setup parallel backend to use many processors
#cores=detectCores()
#cl <- makeCluster(cores[1]-1) #not to overload your computer
#registerDoParallel(cl)
#list = foreach (i = 1:length(train_question[,1])) %dopar% {
#  user = train_question[i,1]
#  time = train_question[i,3]
#  question_gb = fn$sqldf("Select user_id, count(distinct task_container_id) as count_tasks,
#                        sum(answered_correctly) as correct, count(answered_correctly) as count_answers,
#                       sum(cast(answered_correctly as double))/count(cast(answered_correctly as double)) as perc_correct
#                       from train_question where user_id = '$user' and timestamp < '$time' group by user_id ")
#  lecture_gb = fn$sqldf("Select user_id, count(distinct task_container_id) as count_lectures,
#                        count(distinct tag) as count_tag from total_lecture where user_id = '$user' and timestamp < '$time' group by user_id ")
#  train_question[i,15] = question_gb[1,2]
#  train_question[i,16] = question_gb[1,3]
#  train_question[i,17] = question_gb[1,4]
#  train_question[i,18] = question_gb[1,5]
#  train_question[i,19] = lecture_gb[1,2]
#  train_question[i,20] = lecture_gb[1,3]
#  print(i)
#}
#stopCluster(cl)
#Correction type of Data
train_question = transform(train_question, content_id = as.factor(content_id), user_id = as.factor(user_id),
task_container_id = as.factor(task_container_id), answered_correctly = as.factor(answered_correctly),
bundle_id = as.factor(bundle_id), correct_answer = as.factor(correct_answer),
part = as.factor(part), tag1 = as.factor(tag1), tag2 = as.factor(tag2), tag3 = as.factor(tag3), tag4 = as.factor(tag4))
#NA´S TRANSFORM
train_question$prior_question_elapsed_time[is.na(train_question$prior_question_elapsed_time)] <- 0 # replace with "0"
train_question$tag1[is.na(train_question$tag1)] <- "0" # replace with "0"
train_question$tag2[is.na(train_question$tag2)] <- "0" # replace with "0"
train_question$tag3[is.na(train_question$tag3)] <- "0" # replace with "0"
train_question$tag4[is.na(train_question$tag4)] <- "0" # replace with "0"
train_question$count_lectures[is.na(train_question$count_lectures)] <- 0 # replace with "0"
train_question$count_tag[is.na(train_question$count_tag)] <- 0 # replace with "0"
#remove not important dataframes
rm(lectures, questions, train_sample, lecture_gb, question_gb, total_lecture, train_sample)
rm(cl, time, user, cores)
head(train_question)
#count lines of total data set
#n_rows = countLines(paste0(D,"database_aa1/train.csv"))
#n_rows = n_rows[1]
#cat("This is a number of rows of total dataset train: ",n_rows)
#rm(r_rows)
#Dim of sample dataset
cat("This is a dimension of sample dataset train: ",dim(train_question))
#summary of dataset
summary(train_question)
#Answered_Correctly
df <- data.frame(
group = c("Correct", "Incorrect"),
value = c(length(train_question$answered_correctly[train_question$answered_correctly == "1"]),
length(train_question$answered_correctly[train_question$answered_correctly == "0"])))
df
bp<- ggplot(df, aes(x="", y=value, fill=group))+
geom_bar(width = 1, stat = "identity")
pie <- bp + coord_polar("y", start=0)
pie = pie + scale_fill_brewer(palette="Dark2")+
theme_minimal()
pie
hist(train_question$timestamp)
hist(train_question$timestamp)
boxplot(train_question$timestamp)
par(mfrow=c(1,2))
hist(train_question$timestamp)
boxplot(train_question$timestamp)
par(mfrow=c(2,1))
hist(train_question$timestamp)
boxplot(train_question$timestamp)
par(mfrow=c(1,2))
hist(train_question$timestamp)
boxplot(train_question$timestamp)
summary(train_question$timestamp)
par(mfrow=c(1,2))
hist(train_question$timestamp)
boxplot(train_question$timestamp)
par(mfrow=c(1,2))
hist(log(train_question$timestamp))
boxplot(train_question$timestamp)
par(mfrow=c(1,2))
hist(train_question$timestamp)
boxplot(train_question$timestamp)
train_question%>% mutate(y = answered_correctly) %>% ggplot(aes(timestamp, prior_question_elapsed_time, fill = y, color=y)) + geom_point(show.legend = FALSE) + stat_ellipse(type="norm")
train_question%>% mutate(y = answered_correctly) %>% ggplot(aes(count_tasks, perc_correct, fill = y, color=y)) + geom_point(show.legend = FALSE) + stat_ellipse(type="norm")
train_question%>% mutate(y = answered_correctly) %>% ggplot(aes(count_lectures, perc_correct, fill = y, color=y)) + geom_point(show.legend = FALSE) + stat_ellipse(type="norm")
train_question%>% mutate(y = answered_correctly) %>% ggplot(aes(timestamp, perc_correct, fill = y, color=y)) + geom_point(show.legend = FALSE) + stat_ellipse(type="norm")
train_question%>% mutate(y = answered_correctly) %>% ggplot(aes(count_tasks, perc_correct, fill = y, color=y)) + geom_point(show.legend = FALSE) + stat_ellipse(type="norm")
train_question%>% mutate(y = answered_correctly) %>% ggplot(aes(prior_question_elapsed_time, perc_correct, fill = y, color=y)) + geom_point(show.legend = FALSE) + stat_ellipse(type="norm")
train_question%>% mutate(y = answered_correctly) %>% ggplot(aes(count_lectures, perc_correct, fill = y, color=y)) + geom_point(show.legend = FALSE) + stat_ellipse(type="norm")
train_question%>% mutate(y = answered_correctly) %>% ggplot(aes(count_lectures, perc_correct, fill = y, color=y)) + geom_point(show.legend = FALSE) + stat_ellipse(type="coss")
train_question%>% mutate(y = answered_correctly) %>%
ggplot(aes(count_lectures, perc_correct, fill = y, color=y)) + geom_point(show.legend = FALSE) + stat_ellipse(type="norm")
p = data.frame(c(train_question$timestamp,trains_question$prior_question_elapsed_time))
p = data.frame(c(train_question$timestamp,train_question$prior_question_elapsed_time))
panel.hist <- function(x, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col = "cyan", ...)
}
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
pairs(p, diag.panel = panel.hist, upper.panel = panel.cor,
lower.panel = panel.smooth)
#This extension is used for the "countLines" function in Insert Data
#install.packages("R.utils")
library(R.utils)
#This extension is used for the "laf_open" function
#install.packages("LaF")
library(LaF)
#install.packages("stringr")
library(stringr)
#install.packages("tidyr")
library(tidyr)
#install.packages(sqldf)
library(sqldf)
#install.packages("dplyr")
library(dplyr)
#install.packages("foreach")
library(foreach)
#install.packages("doParallel")
library(doParallel)
#install.packages("ggplot2")
library(ggplot2)
#install.packages("scales")
library(scales)
install.packages("graphics")
library(graphics)
install.packages("graphics")
install.packages("graphics")
#This extension is used for the "countLines" function in Insert Data
#install.packages("R.utils")
library(R.utils)
#This extension is used for the "laf_open" function
#install.packages("LaF")
library(LaF)
#install.packages("stringr")
library(stringr)
#install.packages("tidyr")
library(tidyr)
#install.packages(sqldf)
library(sqldf)
#install.packages("dplyr")
library(dplyr)
#install.packages("foreach")
library(foreach)
#install.packages("doParallel")
library(doParallel)
#install.packages("ggplot2")
library(ggplot2)
#install.packages("scales")
library(scales)
install.packages("graphics")
library(graphics)
install.packages("graphics")
p = data.frame(c(train_question$timestamp,train_question$prior_question_elapsed_time))
panel.hist <- function(x, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col = "cyan", ...)
}
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
pairs(p, diag.panel = panel.hist, upper.panel = panel.cor,
lower.panel = panel.smooth)
p = data.frame(train_question$timestamp,train_question$prior_question_elapsed_time)
panel.hist <- function(x, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col = "cyan", ...)
}
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
pairs(p, diag.panel = panel.hist, upper.panel = panel.cor,
lower.panel = panel.smooth)
p = data.frame(train_question$timestamp,train_question$prior_question_elapsed_time, train_question$count_tasks)
panel.hist <- function(x, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col = "cyan", ...)
}
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
pairs(p, diag.panel = panel.hist, upper.panel = panel.cor,
lower.panel = panel.smooth)
p = data.frame(train_question$timestamp,train_question$prior_question_elapsed_time, train_question$count_tasks,
train_question$correct, train_question$count_answers, train_question$perc_correct,
train_question$count_lectures, train_question$count_tag)
panel.hist <- function(x, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col = "cyan", ...)
}
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
pairs(p, diag.panel = panel.hist, upper.panel = panel.cor,
lower.panel = panel.smooth)
p = data.frame(train_question$timestamp,train_question$prior_question_elapsed_time, train_question$count_tasks,
train_question$correct, train_question$count_answers, train_question$perc_correct,
train_question$count_lectures, train_question$count_tag)
cor(p)
panel.hist <- function(x, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col = "cyan", ...)
}
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
p = data.frame(train_question$timestamp,train_question$prior_question_elapsed_time)
pairs(p, diag.panel = panel.hist, upper.panel = panel.cor,
lower.panel = panel.smooth)
